@using Microsoft.JSInterop
@inject IJSRuntime Js

@if (ShouldRenderDialog)
{
    <Portal AfterContentRendered="AfterContentRendered">
        <div @ref="_backdropRef" class="backdrop" @onclick="BackdropClicked">
            <div @ref="_dialogRef" class="dialog" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                <div class="header">
                    <h3>@Title</h3>

                    @if (ShowOpenInExternalWindowButton)
                    {
                        <button class="icon small" @onclick="OpenInWindowRequest">
                            <i class="fa-regular fa-window-restore"></i>
                        </button>
                    }

                    <button class="icon small" @onclick="CloseDialog">
                        <i class="fa-solid fa-xmark-large"></i>
                    </button>
                </div>

                <div class="dialog-content">
                    @ChildContent
                </div>
            </div>
        </div>
    </Portal>
}

@code {
    [Parameter] public string? Title { get; set; }
    [Parameter] public bool BackdropDismissable { get; set; } = true;

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback OpenInExternalWindowButtonClicked { get; set; }

    private bool ShowOpenInExternalWindowButton => OpenInExternalWindowButtonClicked.HasDelegate
                                                   && (OperatingSystem.IsWindows() || OperatingSystem.IsMacOS() || OperatingSystem.IsMacCatalyst());

    private ElementReference? _backdropRef;
    private ElementReference? _dialogRef;

    private IJSObjectReference? _module;
    private bool _opened;

    private bool _pendingOpen;

    // Suppress BL0007: This parameter intentionally uses a custom setter to manage UI state
    #pragma warning disable BL0007
    [Parameter]
    public bool Opened
    {
        get => _opened;
        set
        {
            _opened = value;

            if (value)
            {
                ShouldRenderDialog = true;
                _pendingOpen = true;
            }
            else
            {
                _ = RunDelayedCloseAsync();
            }
        }
    }
    #pragma warning restore BL0007

    [Parameter] public EventCallback<bool> OpenedChanged { get; set; }

    private bool ShouldRenderDialog { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await Js.InvokeAsync<IJSObjectReference>("import", "./_content/CorUI/Dialog.razor.js");
        }
    }

    private async Task OpenDialog()
    {
        await _module!.InvokeVoidAsync("open", _backdropRef, _dialogRef);
    }

    private async Task RunDelayedCloseAsync()
    {
        ShouldRenderDialog = false;
        await InvokeAsync(StateHasChanged);
    }

    private void BackdropClicked()
    {
        if (BackdropDismissable)
        {
            CloseDialog();
        }
    }

    private void CloseDialog()
    {
        Opened = false;
        OpenedChanged.InvokeAsync(false);
    }

    private async Task AfterContentRendered()
    {
        if (_pendingOpen && _module is not null && _backdropRef is not null && _dialogRef is not null)
        {
            _pendingOpen = false;
            await OpenDialog();
        }
    }

    private async Task OpenInWindowRequest()
    {
        CloseDialog();
        await OpenInExternalWindowButtonClicked.InvokeAsync();
    }
}